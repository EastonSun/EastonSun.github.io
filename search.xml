<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搜索引擎优化</title>
    <url>/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<p>博客上线也有一个月了，查了一下Google和Bing两大搜索引擎，只有Google有收录Bing没有任何一条收录，于是对搜索引擎进行一下优化。</p>
<span id="more"></span>
<h2 id="安装插件和配置"><a href="#安装插件和配置" class="headerlink" title="安装插件和配置"></a>安装<mark class="label ">hexo-generator-sitemap</mark>插件和配置<mark class="label info">_config.yml</mark></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改<mark class="label info">_config.yml</mark>文件</h3><p>打开<mark class="label ">根目录</mark>的<mark class="label info">_config.yml</mark>文件，加入以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common sitemap for all the search engines</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>将<font style="background:black">permalink:</font>修改为<font style="background:blue">:title.html</font>，将<font style="background:black">trailing_index:</font>修改为<font style="background:blue">false</font></p>
<h2 id="向Google提交站点地图"><a href="#向Google提交站点地图" class="headerlink" title="向Google提交站点地图"></a>向Google提交站点地图</h2><p>打开<span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZS8=">Google Search Console<i class="fa fa-external-link-alt"></i></span>，箭头处填入域名<br><img data-src="/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/sitename.png" alt="填入域名"><br>选择<mark class="label ">HTML标记认证</mark>，将会得到<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;meta name<span class="operator">=</span><span class="string">&quot;google-site-verification&quot;</span> content<span class="operator">=</span><span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>复制<font style="background:black">XXXXXXXXXXXXXXXXXXXXXXX</font>的值，将其粘贴到<mark class="label ">_config.next.yml</mark>的<mark class="label info">google_site_verification:</mark><br>运行<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo d</span><br></pre></td></tr></table></figure>后点击验证<br><img data-src="/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/verify.png" alt="验证"><br>在弹出的对话框中点击<mark class="label info">前往资源页面</mark><br><img data-src="/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/verify_ok.png" alt="验证完成"><br>点击左侧的<mark class="label ">站点地图</mark>，在添加新的站点地图处填入<mark class="label info">sitemap.xml</mark><br><img data-src="/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/sitemap.png" alt="sitemap"></p>
<h2 id="向Bing提交站点地图"><a href="#向Bing提交站点地图" class="headerlink" title="向Bing提交站点地图"></a>向Bing提交站点地图</h2><p>打开<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVycw==">Bing Webmasters<i class="fa fa-external-link-alt"></i></span>登录后选择<mark class="label success">从GSC导入你的网站</mark><br><img data-src="/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/bing.png" alt="bing"></p>
<h2 id="使用IndexNow快速提交至Bing"><a href="#使用IndexNow快速提交至Bing" class="headerlink" title="使用IndexNow快速提交至Bing"></a>使用IndexNow快速提交至Bing</h2><h3 id="安装hexo-indexnow插件"><a href="#安装hexo-indexnow插件" class="headerlink" title="安装hexo-indexnow插件"></a>安装hexo-indexnow插件</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-indexnow <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h3 id="获取API-Key"><a href="#获取API-Key" class="headerlink" title="获取API Key"></a>获取API Key</h3><p>打开<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vaW5kZXhub3cvZ2V0c3RhcnRlZA==">Bing IndexNow<i class="fa fa-external-link-alt"></i></span>，找到API Key点击下载箭头将文件下载到<mark class="label info">/source</mark>目录并复制API Key<br><img data-src="/Hexo%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/indexnow.png" alt="indexnow"></p>
<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>将以下代码复制到根目录的<mark class="label ">_config.yml</mark></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">hexo_indexnow:</span></span><br><span class="line"><span class="symbol">  count:</span> latest <span class="meta"># 数字或者 <span class="string">&quot;latest&quot;</span>(=1)</span></span><br><span class="line"><span class="symbol">  txt_name:</span> indexnow.txt <span class="meta"># 链接文件名</span></span><br><span class="line"><span class="symbol">  apikey:</span> xxxxxx <span class="meta"># 你的 apikey</span></span><br><span class="line"><span class="symbol">  server:</span> bing <span class="meta"># indexnow 服务器，可选值有:bing、yandex、indexnow</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  - type: indexnow_url_submitter</span><br></pre></td></tr></table></figure>
<h2 id="设置robots"><a href="#设置robots" class="headerlink" title="设置robots"></a>设置robots</h2><p>在<mark class="label info">/source</mark>目录下新建<mark class="label danger">robots.txt</mark>文件，将下列代码复制到文件中</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line"><span class="symbol">Allow:</span> /</span><br><span class="line"><span class="symbol">Allow:</span> <span class="keyword">/archives/</span></span><br><span class="line"><span class="symbol">Allow:</span> <span class="keyword">/categories/</span></span><br><span class="line"><span class="symbol">Allow:</span> <span class="keyword">/tags/</span></span><br><span class="line"><span class="symbol">Allow:</span> <span class="keyword">/about/</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="keyword">/vendors/</span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="keyword">/js/</span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="keyword">/css/</span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="keyword">/fonts/</span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="keyword">/fancybox/</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">Sitemap:</span> https:<span class="comment">//www.eyunbook.com/sitemap.xml</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>seo优化</tag>
        <tag>hexo-generator-sitemap</tag>
        <tag>hexo-indexnow</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加标签页面</title>
    <url>/Hexo%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2.html</url>
    <content><![CDATA[<p>Hexo允许用户添加自定义页面，最常见的就是添加“标签”页面。<span id="more"></span></p>
<h2 id="添加“标签”页面"><a href="#添加“标签”页面" class="headerlink" title="添加“标签”页面"></a>添加“标签”页面</h2><div class="tabs" id="first-tab"><ul class="nav-tabs"><li class="tab active"><a href="#first-tab-1">添加新页面</a></li><li class="tab"><a href="#first-tab-2">设置页面类型</a></li><li class="tab"><a href="#first-tab-3">编辑菜单</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><p>在 <mark class="label primary">站点根目不下</mark> 鼠标右键点击<font style="background:black">Open Git Bash here</font>，使用命令<font style="background:black">hexo n page tags</font>创建一个新的<font style="background:black">tags</font>页面：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo n page tags</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-tab-2"><p>编辑新页面，将类型改为<font style="background:black">tags</font>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-08-11 14:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-tab-3"><p>编辑 <mark class="label primary">NexT配置文件</mark> 下的<font style="background:black">menu</font>选项，将<font style="background:black">tags</font>前的注释取消：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || fa fa-home</span><br><span class="line"><span class="symbol">  archives:</span> <span class="keyword">/archives/</span> || fa fa-archive</span><br><span class="line"><span class="symbol">  tags:</span> <span class="keyword">/tags/</span> || fa fa-tags</span><br></pre></td></tr></table></figure></div></div></div>

<div class="note warning"><p>如果网站启用了评论系统，需要在新建的页面中禁用评论系统：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">itle:</span> <span class="string">Tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-08-11 14:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</div>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>标签页面</tag>
      </tags>
  </entry>
  <entry>
    <title>ImmortalWrt自定义固件编译方法之一:ImageBuilder</title>
    <url>/ImmortalWrt%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E4%B9%8B%E4%B8%80-ImageBuilder.html</url>
    <content><![CDATA[<p>Image Builder是一个预编译环境，适用于创建自定义映像，无需从源代码编译，支持下载预编译软件包并将其集成进固件中。<span id="more"></span></p>
<div class="note info"><ul>
<li>Image Builder仅在64位Linux中运行</li>
<li>测试环境为Ubuntu 24.04，设备为x86&#x2F;64</li>
<li>以非root用户运行</li>
</ul>
</div>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><div class="tabs" id="依赖"><ul class="nav-tabs"><li class="tab active"><a href="#依赖-1">Ubuntu 24.04</a></li><li class="tab"><a href="#依赖-2">Ubuntu 22.04</a></li></ul><div class="tab-content"><div class="tab-pane active" id="依赖-1"><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt <span class="keyword">install </span><span class="keyword">build-essential </span>clang flex <span class="keyword">bison </span>g++ gawk \</span><br><span class="line">gcc-<span class="keyword">multilib </span>g++-<span class="keyword">multilib </span>gettext git libncurses5-dev libssl-dev \</span><br><span class="line">python3-setuptools rsync <span class="keyword">swig </span>unzip zlib1g-dev file wget</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="依赖-2"><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt <span class="keyword">install </span><span class="keyword">build-essential </span>clang flex <span class="keyword">bison </span>g++ gawk \</span><br><span class="line">gcc-<span class="keyword">multilib </span>g++-<span class="keyword">multilib </span>gettext git libncurses-dev libssl-dev \</span><br><span class="line">python3-<span class="keyword">distutils </span>python3-setuptools rsync <span class="keyword">swig </span>unzip zlib1g-dev file wget</span><br></pre></td></tr></table></figure></div></div></div>

<div class="note info"><p>其余系统参阅<span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLWRldmVsb3Blci90b29sY2hhaW4vaW5zdGFsbC1idWlsZHN5c3RlbQ==">Build system setup<i class="fa fa-external-link-alt"></i></span></p>
</div>

<h2 id="获取Image-Builder"><a href="#获取Image-Builder" class="headerlink" title="获取Image Builder"></a>获取Image Builder</h2><p>进入<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZHMuaW1tb3J0YWx3cnQub3JnLw==">ImmortalWrt Download<i class="fa fa-external-link-alt"></i></span>页面</p>
<h3 id="选择需要编译的版本"><a href="#选择需要编译的版本" class="headerlink" title="选择需要编译的版本"></a>选择需要编译的版本</h3><img data-src="/ImmortalWrt%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E4%B9%8B%E4%B8%80-ImageBuilder/release.png" class="">

<div class="note info"><p>建议选择最新的Release版本</p>
</div>

<h3 id="选择设备型号"><a href="#选择设备型号" class="headerlink" title="选择设备型号"></a>选择设备型号</h3><img data-src="/ImmortalWrt%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E4%B9%8B%E4%B8%80-ImageBuilder/x86.png" class="">
<img data-src="/ImmortalWrt%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E4%B9%8B%E4%B8%80-ImageBuilder/64.png" class="">

<h3 id="获取Immage-Builder并解压缩"><a href="#获取Immage-Builder并解压缩" class="headerlink" title="获取Immage Builder并解压缩"></a>获取Immage Builder并解压缩</h3><p>在<strong>Supplementary Files</strong>下找到<mark class="label ">immortalwrt-imagebuilder-23.05.4-x86-64.Linux-x86_64.tar.xz</mark>，鼠标右键<mark class="label primary">复制链接地址</mark>，在Ubuntu中输入以下命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://downloads.immortalwrt.org/releases/<span class="number">23</span>.<span class="number">05</span>.<span class="number">4</span>/targets/x86/<span class="number">64</span>/immortalwrt-imagebuilder-<span class="number">23</span>.<span class="number">05</span>.<span class="number">4</span>-x86-<span class="number">64</span>.Linux-x86_64.tar.xz  # 链接地址为刚鼠标右键复制所得</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line"><span class="attribute">tar</span> -J -x -f immortalwrt-imagebuilder-<span class="number">23</span>.<span class="number">05</span>.<span class="number">4</span>-x86-<span class="number">64</span>.Linux-x86_64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压缩后的文件夹</span></span><br><span class="line"><span class="attribute">cd</span> immortalwrt-imagebuilder-<span class="number">23</span>.<span class="number">05</span>.<span class="number">4</span>-x86-<span class="number">64</span>.Linux-x86_64</span><br></pre></td></tr></table></figure>

<div class="note info"><p>Image Builder 统一命名为 immortalwrt-imagebuilder[-&lt;version&gt;]-&lt;platform&gt;.Linux-&lt;ib_arch&gt;.tar.xz</p>
</div>

<h2 id="使用Immage-Builder编译固件"><a href="#使用Immage-Builder编译固件" class="headerlink" title="使用Immage Builder编译固件"></a>使用Immage Builder编译固件</h2><p>Immage Builder可使用的变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PROFILE</td>
<td>指定需要构建的设备</td>
</tr>
<tr>
<td>PACKAGES</td>
<td>需要集成进固件的软件包列表</td>
</tr>
<tr>
<td>FILES</td>
<td>要集成的自定义文件的目录</td>
</tr>
<tr>
<td>BIN_DIR</td>
<td>固件输出文件夹（默认 bin）</td>
</tr>
<tr>
<td>EXTRA_IMAGE_NAME</td>
<td>自定义附加固件文件名</td>
</tr>
<tr>
<td>DISABLED_SERVICES</td>
<td>&#x2F;etc&#x2F;init.d 中要禁用的服务名称，如 dnsmasq 的 dhcp</td>
</tr>
</tbody></table>
<h3 id="确定设备"><a href="#确定设备" class="headerlink" title="确定设备"></a>确定设备</h3><p><mark>PROFILE</mark> 变量指定要构建的目标固件，运行<mark class="label info"> make info</mark>可以获取可用的设备列表以及默认软件包配置。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PROFILE</span><span class="operator">=</span><span class="string">&quot;generic&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="增加或删除软件包"><a href="#增加或删除软件包" class="headerlink" title="增加或删除软件包"></a>增加或删除软件包</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PACKAGES</span><span class="operator">=</span><span class="string">&quot;pkg1 pkg2 pkg3 -pkg4 -pkg5 -pkg6&quot;</span></span><br></pre></td></tr></table></figure>

<div class="note info"><ul>
<li>示例为增加pkg1、pkg2、pkg3，并去除 pkg4、pkg5、pkg6</li>
<li>可通过以下地址获取ImmortalWrt所有可用软件包<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZHMuaW1tb3J0YWx3cnQub3JnL3JlbGVhc2VzLzIzLjA1LjQvcGFja2FnZXMveDg2XzY0L3BhY2thZ2VzLw==">https://downloads.immortalwrt.org/releases/23.05.4/packages/x86_64/packages/<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZHMuaW1tb3J0YWx3cnQub3JnL3JlbGVhc2VzLzIzLjA1LjQvcGFja2FnZXMveDg2XzY0L2x1Y2kv">https://downloads.immortalwrt.org/releases/23.05.4/packages/x86_64/luci/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>在Image Builder中，opkg不会自动安装翻译文件，如需安装LuCI插件和翻译包，要优先写翻译包的名称。如<font style="background: black">luci-i18n-zerotier-zh-cn</font></li>
</ul>
</div>

<h3 id="自定义软件包"><a href="#自定义软件包" class="headerlink" title="自定义软件包"></a>自定义软件包</h3><p>如果想要把ImmortalWrt没有的软件包集成到固件中，可将ipk文件放到根目录下的packages文件夹中，并将其添加到<font style="background:black">PACKAGES</font>变量中。</p>
<h3 id="自定义文件夹"><a href="#自定义文件夹" class="headerlink" title="自定义文件夹"></a>自定义文件夹</h3><p><font style="background:black">FILES</font>变量允许将自定义配置文件包含在构建的固件中，比如修改默认的LAN IP地址，在<font style="background:black">files&#x2F;etc&#x2F;uci-defaults</font>目录下(如不存在请新建)新建99-custom文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改lan IP</span></span><br><span class="line">uci -q batch &lt;&lt; <span class="string">EOI</span></span><br><span class="line"><span class="string">set network.lan.ipaddr=&#x27;192.168.31.1&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOI</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>有一些配置无法通过变量来指定，需要通过手动修改<font style="background:black">.config</font>文件，<br>将<font style="background:black">Root filesystem images</font>中的<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">CONFIG_ISO_IMAGES</span>=y</span><br></pre></td></tr></table></figure>修改为：<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"># CONFIG_ISO_IMAGES <span class="keyword">is</span> not <span class="keyword">set</span></span><br></pre></td></tr></table></figure>可取消构建ISO固件<br>还可以修改kernel和rootfs的大小：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">CONFIG_TARGET_KERNEL_PARTSIZE</span>=<span class="number">64</span></span><br><span class="line"><span class="attr">CONFIG_TARGET_ROOTFS_PARTSIZE</span>=<span class="number">1024</span></span><br></pre></td></tr></table></figure>

<h3 id="添加自定义软件源"><a href="#添加自定义软件源" class="headerlink" title="添加自定义软件源"></a>添加自定义软件源</h3><p>编辑根目录的<mark class="label success">repositories.conf</mark>文件，注释掉<code>option check_signature</code>并加入自己软件源即可</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">## Place your custom <span class="keyword">repositories</span> here, they must match the architecture and version.</span><br><span class="line"># src<span class="regexp">/gz %n https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases/<span class="number">23.05</span>.<span class="number">5</span></span><br><span class="line"># src custom <span class="keyword">file</span>:<span class="comment">///usr/src/openwrt/bin/x86/packages</span></span><br><span class="line"></span><br><span class="line">## Remote <span class="keyword">package</span> <span class="keyword">repositories</span></span><br><span class="line">src<span class="regexp">/gz openwrt_core https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases<span class="regexp">/23.05.5/</span>targets<span class="regexp">/x86/</span><span class="number">64</span>/packages</span><br><span class="line">src<span class="regexp">/gz openwrt_base https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases<span class="regexp">/23.05.5/</span>packages<span class="regexp">/x86_64/</span>base</span><br><span class="line">src<span class="regexp">/gz openwrt_luci https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases<span class="regexp">/23.05.5/</span>packages<span class="regexp">/x86_64/</span>luci</span><br><span class="line">src<span class="regexp">/gz openwrt_packages https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases<span class="regexp">/23.05.5/</span>packages<span class="regexp">/x86_64/</span>packages</span><br><span class="line">src<span class="regexp">/gz openwrt_routing https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases<span class="regexp">/23.05.5/</span>packages<span class="regexp">/x86_64/</span>routing</span><br><span class="line">src<span class="regexp">/gz openwrt_telephony https:/</span><span class="regexp">/downloads.openwrt.org/</span>releases<span class="regexp">/23.05.5/</span>packages<span class="regexp">/x86_64/</span>telephony</span><br><span class="line">src<span class="regexp">/gz openwrt_kenzok8_ackage https:/</span><span class="regexp">/op.dllkids.xyz/</span>packages<span class="regexp">/x86_64/</span></span><br><span class="line"></span><br><span class="line">## <span class="keyword">This</span> is the local <span class="keyword">package</span> repository, <span class="keyword">do</span> not remove!</span><br><span class="line">src imagebuilder <span class="keyword">file</span>:packages</span><br><span class="line"></span><br><span class="line"># option check_signature</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>kenzok8这个软件源更新比较快，尴尬的是因为下载量大服务器的流量不够用，二是https证书经常过期</p>
</div>
<h3 id="构建固件"><a href="#构建固件" class="headerlink" title="构建固件"></a>构建固件</h3><p>选择好配置文件、插件和自定义文件夹后，使用<font style="background:black">make image</font>命令构建固件：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">make image PROFILE<span class="operator">=</span><span class="string">&quot;profile-name&quot;</span> PACKAGES<span class="operator">=</span><span class="string">&quot;pkg1 pkg2 pkg3 -pkg4 -pkg5 -pkg6&quot;</span> FILES<span class="operator">=</span><span class="string">&quot;files&quot;</span></span><br></pre></td></tr></table></figure>
<p>编译好的固件存放于<font style="background:black">bin</font>目录下</p>
<h3 id="清理编译"><a href="#清理编译" class="headerlink" title="清理编译"></a>清理编译</h3><p>要清理临时构建文件和生成的固件，使用<font style="background:black">make clean</font>命令</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">make image \</span><br><span class="line"><span class="attribute">PROFILE</span><span class="operator">=</span><span class="string">&quot;generic&quot;</span> \</span><br><span class="line"><span class="attribute">PACKAGES</span><span class="operator">=</span><span class="string">&quot;-luci-app-attendedsysupgrade -attendedsysupgrade-common open-vm-tools open-vm-tools-fuse luci-i18n-smartdns-zh-cn luci-i18n-passwall-zh-cn luci-i18n-vlmcsd-zh-cn luci-i18n-firewall-zh-cn luci-i18n-ttyd-zh-cn luci-i18n-opkg-zh-cn luci-i18n-diskman-zh-cn&quot;</span> \</span><br><span class="line"><span class="attribute">FILES</span><span class="operator">=</span><span class="string">&quot;files&quot;</span> \</span><br><span class="line">EXTRA_IMAGE_NAME<span class="operator">=</span><span class="string">&quot;Release&quot;</span></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>如骗译过程中报<font style="background:red">qcow2 error</font>错误，可使用以下命令修复：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install qemu-utils</span><br></pre></td></tr></table></figure>
</div>]]></content>
      <tags>
        <tag>ImmortalWrt</tag>
        <tag>ImageBuilder</tag>
        <tag>x86/64</tag>
      </tags>
  </entry>
  <entry>
    <title>Win11搭建hexo并部署到GitHub</title>
    <url>/Win11%E6%90%AD%E5%BB%BAhexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHub.html</url>
    <content><![CDATA[<h2 id="本地安装-Win11"><a href="#本地安装-Win11" class="headerlink" title="本地安装(Win11)"></a>本地安装(Win11)</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>在安装Hexo前，需要先安装以下程序</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnLw==">Node.js<i class="fa fa-external-link-alt"></i></span>(Node.js版本需不低于10.13，建议使用Node.js 12.0及以上版本)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git<i class="fa fa-external-link-alt"></i></span><span id="more"></span>
<strong>设置npm代理</strong><br>编辑”C:\Users\user\.npmrc”文件，添加以下内容：<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">https-proxy</span>=http://proxy-server-address:port</span><br><span class="line"><span class="attr">proxy</span>=http://proxy-server-address:port</span><br></pre></td></tr></table></figure>
<strong>查看当前代理</strong><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="built_in">get</span> proxy</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在电脑上新建一个文件夹，例如E:\hexo。进入该文夹在空白处点鼠标右键，选择Open Git Bash here，输入如下命令：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>install -g命令是使用npm包管理工具进行全局安装，hexo-cli为hexo的客户端模块。<br>安装完成后，执行以下命令，Hexo会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">hexo init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword"></span>cd <span class="keyword">blog</span></span><br><span class="line"><span class="keyword"></span>npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<ul>
<li>node-modules  依赖包</li>
<li>public    存放生成的页面</li>
<li>_config.yml   网站的配置文件</li>
<li>package.json  应用程序信息</li>
<li>scaffolds     模板文件夹</li>
<li>source    资源文件夹</li>
<li>thems     主题文件夹</li>
</ul>
<h3 id="修改hexo配置文件"><a href="#修改hexo配置文件" class="headerlink" title="修改hexo配置文件"></a>修改hexo配置文件</h3><p>hexo的配置文件位于站点根目录下，名字为：_config.yml，主要修改以下内容：</p>
<ul>
<li>title 网站标题</li>
<li>subtitle  网站副标题</li>
<li>description   网站描述</li>
<li>keywords  网站关键字</li>
<li>author    作者名字</li>
<li>language  网站使用的语言，一般改为zh-CN</li>
<li>timezone  网站时区，一般改为Asia&#x2F;Shanghai</li>
<li>url   网站网址</li>
<li>theme 主题名称，比如next</li>
<li>post_asset_folder 设为true后，执行命令$hexo new post_name会在source&#x2F;_posts中生成和文章同名的文件夹，可以把图片等放到此文件夹中</li>
<li>在post_asset_folder下面添加如下配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这时<font color=red>![](image.png)</font>会被自动解析</p>
<p>其它的配置修改可参考<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbg==">官网<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="上传至GitHub"><a href="#上传至GitHub" class="headerlink" title="上传至GitHub"></a>上传至GitHub</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>在GitHub个人主页新建一仓库，名称的前半部分为GitHub的用户名，后半部分为github.io<br>在git bash中输入以下命令：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;youremail&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>yourname,youremail分别为GitHub的用户名和注册邮箱<br>点击头像选择Settings，点击左侧栏里的SSH and GPG keys，打开C:\Users\user.ssh目录下的id_rsa.pub文件，把内容复制到SSH keys中</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>打开blog目录下的_config.yml文件，找到文件末尾的Deployment添加以下内容：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">    type:</span> git</span><br><span class="line"><span class="symbol">    repo:</span> https:<span class="comment">//github.com/username/username.github.io.git</span></span><br><span class="line"><span class="symbol">    branch:</span> main</span><br></pre></td></tr></table></figure>
<p>在git bash中输入以下命令安装git部署工具：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="主题与插件"><a href="#主题与插件" class="headerlink" title="主题与插件"></a>主题与插件</h2><p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">官网<i class="fa fa-external-link-alt"></i></span>有很多的主题，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">Next<i class="fa fa-external-link-alt"></i></span>一款很受欢迎的主题。</p>
<h3 id="Next安装"><a href="#Next安装" class="headerlink" title="Next安装"></a>Next安装</h3><p>在blog目录下运行如下命令；</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-<span class="keyword">next</span><span class="symbol">@latest</span></span><br></pre></td></tr></table></figure>
<p>新建一个名为：_config.next.yml的空文件并运行如下命令：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cp</span> node_modules/hexo-theme-<span class="keyword">next</span>/_config.yml _config.<span class="keyword">next</span>.yml</span><br></pre></td></tr></table></figure>
<p>修改_config.yml将theme: landscape改为theme: next</p>
<h3 id="修改主题配置文件-config-next-yml"><a href="#修改主题配置文件-config-next-yml" class="headerlink" title="修改主题配置文件(_config.next.yml)"></a>修改主题配置文件(_config.next.yml)</h3><ul>
<li>Schemes   主题样式根据个人喜好选择，我个人喜欢Gemini</li>
<li>Dark Mode     黑暗模式</li>
<li>favicon   站点图标，使用自己的图标替换\hexo\blog\node_modules\hexo-theme-next\source\images下的文件</li>
<li>menu  菜单栏，取消要启用的相关菜单注释即可，需要注意的是除home和archives外其它的页面都需手动创建</li>
<li>sidebar   侧边栏，将display改为always</li>
<li>avatar    头像，rounded设置为true头像为圆形，rotated设置为true，鼠标悬停头像会旋转</li>
<li>excerpt-description   设为false使用&lt;!-- more –&gt;来分隔文章</li>
<li>Post wordcount display setting：文章字数统计，要启用此插件必须先安装<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">word</span>-counter</span><br></pre></td></tr></table></figure></li>
<li>codeblock：代码高亮，个人比较喜欢a11y-dark，更多的高亮主题请<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9oaWdobGlnaHQv">参考<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<div class="note info"><p>如果使用不蒜子计数统计，可修改\node_modules\hexo-theme-next\layout_third-party\statistics目录下的busuanzi-counter.njk文件，将</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;script</span><span class="template-variable">&#123;&#123; <span class="name">pjax</span> &#125;&#125;</span><span class="language-xml"> async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://vercount.one/js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其它的配置修改可参考<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzLw==">官网文档<i class="fa fa-external-link-alt"></i></span>根据个人需要进行修改</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 启用Vercel的Web Analytics</title>
    <url>/hexo-%E5%90%AF%E7%94%A8Vercel%E7%9A%84Web-Analytics.html</url>
    <content><![CDATA[<p>前面一篇文章介绍过把博客部署到<mark class="label info">Vercel</mark></p>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/logo.png"></object>
<p>优化 Github Pages 国内的访问速度</p><p><mark class="label ">E云笔记</mark> 我的学习笔记</p>
<a href="https://www.eyunbook.com/优化Github-Pages国内的访问速度.html"></a>
</div></div>
<mark class="label info">Vercle</mark>还提供了<mark class="label primary">Web Analytics</mark>功能
<span id="more"></span>
<h2 id="开启Web-Analytics"><a href="#开启Web-Analytics" class="headerlink" title="开启Web Analytics"></a>开启Web Analytics</h2><p>在<mark class="label info">Vercel</mark>仪表盘点点击进入已部署好的博客项目，点击上方导航栏的<mark class="label ">Analytics</mark>在新的页面中点击<mark class="label ">Web Analytics</mark>下方的<mark class="label success">Enable</mark>，在弹出的页面中选择免费计划并点击<mark class="label success">Enable</mark><br><img data-src="/hexo-%E5%90%AF%E7%94%A8Vercel%E7%9A%84Web-Analytics/analytics.png" alt="analytics"><br><img data-src="/hexo-%E5%90%AF%E7%94%A8Vercel%E7%9A%84Web-Analytics/enable.png" alt="enable"></p>
<h2 id="将script添加到Hexo"><a href="#将script添加到Hexo" class="headerlink" title="将script添加到Hexo"></a>将script添加到Hexo</h2><p>在<mark class="label info">\blog\node_modules\hexo-theme-next\scripts\filters</mark>目录下新建<mark class="label ">vercel_analytics.js</mark>文件并复制以下代码到文件中保存</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">hexo.extend.<span class="built_in">filter</span>.register(<span class="string">&#x27;theme_inject&#x27;</span>, <span class="keyword">function</span>(<span class="params">injects</span>) &#123;</span><br><span class="line">    injects.bodyEnd.raw(<span class="string">&#x27;vercel-analytics-js&#x27;</span>, <span class="string">&#x27;&lt;script defer src=&quot;/_vercel/insights/script.js&quot;&gt;&lt;/script&gt;&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>重新部署后稍等一会就能看到Web Analytics数据</p>
<div class="note warning"><p>此方法只适用于Next主题，其它主题请自行搜索</p>
</div>]]></content>
      <tags>
        <tag>vercel</tag>
        <tag>web analytics</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu切换到root用户及用root用户登录</title>
    <url>/ubuntu%E5%88%87%E6%8D%A2%E5%88%B0root%E7%94%A8%E6%88%B7%E5%8F%8A%E7%94%A8root%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95.html</url>
    <content><![CDATA[<p>当用安装时的用户名和密码登录到Ubuntu系统，如果想切换到root用户系统会提示：<mark class="label warning">Authentication failure</mark>，这是因为在安装ubuntu系统时设置的用户名和密码并不是root用户的。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">username<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>su root</span><br><span class="line"><span class="symbol">password:</span></span><br><span class="line"><span class="symbol">su:</span> <span class="title class_">Authentication</span> failure</span><br></pre></td></tr></table></figure>
<p>这时我们就需要启用root用户并设置密码。<span id="more"></span></p>
<h2 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">passwd</span> <span class="string">root</span></span><br><span class="line">[<span class="string">sudo</span>] <span class="attr">password for username:</span> <span class="comment"># 输入当前用户的密码</span></span><br><span class="line"><span class="attr">New password:</span> <span class="comment"># 输入root的密码</span></span><br><span class="line"><span class="attr">Retype new password:</span> <span class="comment"># 再次输入root的密码</span></span><br><span class="line"><span class="attr">passwd:</span> <span class="string">password</span> <span class="string">updated</span> <span class="string">successfully</span> <span class="comment"># 密码设置成功</span></span><br></pre></td></tr></table></figure>
<h2 id="修改sshd-config文件"><a href="#修改sshd-config文件" class="headerlink" title="修改sshd_config文件"></a>修改sshd_config文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>将<mark class="label info">PermitRootLogin</mark>的参数设置为<mark>yes</mark></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PermitRootLogin</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>保存退出后重启ssh服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>
<div class="note info"><p>此时可以顺便把ssh端口改掉<br>将：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#Port 22</span></span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Port</span> <span class="comment">#新端口号</span></span><br></pre></td></tr></table></figure></div>
<h2 id="root用户和普通用户的切换"><a href="#root用户和普通用户的切换" class="headerlink" title="root用户和普通用户的切换"></a>root用户和普通用户的切换</h2><div class="tabs" id="first-tab"><ul class="nav-tabs"><li class="tab active"><a href="#first-tab-1">root切换到普通户</a></li><li class="tab"><a href="#first-tab-2">普通用户切换到root</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">su username</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-tab-2"><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="symbol">Password:</span> <span class="meta"># 输入root密码</span></span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>root</tag>
      </tags>
  </entry>
  <entry>
    <title>为Git Bash配置代理</title>
    <url>/%E4%B8%BAGit-Bash%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86.html</url>
    <content><![CDATA[<p>在国内访问Git的速度非常慢，将博客上传到Github时经常报错<mark class="label warning">fatal: unable to access https://github.com/EastonSun/EastonSun.github.io.git/: Failed to connect to github.com port 443 after 21174 ms: Could not connect to server</mark>，为<mark class="label info">Git Bash</mark>配置代理后错误消失。</p>
<span id="more"></span>
<h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.proxy</span> http:<span class="comment">//127.0.0.1:10801</span></span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> https:<span class="comment">//127.0.0.1:10801</span></span><br></pre></td></tr></table></figure>
<div class="note warning"><p><strong>将端口号换成自己的代理端口</strong></p>
</div>
<h2 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.proxy</span></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git bash</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>优化Github Pages国内的访问速度</title>
    <url>/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6.html</url>
    <content><![CDATA[<p>本博客托管在Github Pages上，简单方便快捷唯一不好的就是国内访问速度不好，甚至有时出现访问不了的情况。</p>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/logo.png"></object>
<p>Win11搭建hexo并部署到Github</p><p><mark class="label ">E云笔记</mark>  我的学习笔记</p>
<a href="https://www.eyunbook.com/Win11搭建hexo并部署到GitHub.html"></a>
</div></div>
<p>网上有众多的解决方案，能够白嫖的也就是<span class="exturl" data-url="aHR0cHM6Ly9hcHAubmV0bGlmeS5jb20v">Netlify<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly92ZXJjZWwuY29tLw==">Vercel<i class="fa fa-external-link-alt"></i></span>，经过对比后我最终选择了<mark class="label info">Vercel</mark></p>
<span id="more"></span>
<p>从同一时间测速的情况来看<mark class="label info">Vercel</mark>是最理想的</p>
<div class="tabs" id="first-tab"><ul class="nav-tabs"><li class="tab active"><a href="#first-tab-1">Github</a></li><li class="tab"><a href="#first-tab-2">netlify</a></li><li class="tab"><a href="#first-tab-3">vercel</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/github.png" class=""></div><div class="tab-pane" id="first-tab-2"><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/netlify.png" class=""></div><div class="tab-pane" id="first-tab-3"><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/vercel.png" class=""></div></div></div>

<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><span class="exturl" data-url="aHR0cHM6Ly92ZXJjZWwuY29tLw==">Vercel<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9hcHAubmV0bGlmeS5jb20v">Netlify<i class="fa fa-external-link-alt"></i></span>的注册都非常简单，使用Github帐号即可注册与登录。<br><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/vercel_reg.png" alt="vercel注册"></p>
<h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><p>点击右上角的Add New选择Project<br><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/project.png" alt="project"><br>找到需要导入的项目并点击Import就可完成项目的导入</p>
<h2 id="使用自定义域名访问"><a href="#使用自定义域名访问" class="headerlink" title="使用自定义域名访问"></a>使用自定义域名访问</h2><p>整个导入的过程很快，导入完成后进入到刚导入的项目，点击上方的Settings再点击右边的Domains，这时就能看到一个以项目名称开头的二级域名，这个域名很长不方便记忆，这时我们可以添加一个自定义域名。</p>
<h3 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h3><p>先在域名解析商处添加一个CNAME记录。</p>
<div class="note danger"><p>添加解析记录时，目标处要填入<strong>name-china.vercel-dns.com</strong>，这是官方专门为中国大陆优化过的</p>
</div>
<h3 id="添加自定义域名"><a href="#添加自定义域名" class="headerlink" title="添加自定义域名"></a>添加自定义域名</h3><p><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/domain.png" alt="domain"><br>在mywebsite.com处填入域名点击Add就完成了域名添加</p>
<h3 id="二级域名跳转到自定义域名"><a href="#二级域名跳转到自定义域名" class="headerlink" title="二级域名跳转到自定义域名"></a>二级域名跳转到自定义域名</h3><p>点击二级域名旁的Edit，Redirect to处填入自定义域名，Status Code处选择308 Permanent Redirect<br><img data-src="/%E4%BC%98%E5%8C%96Github-Pages%E5%9B%BD%E5%86%85%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/redirect.png" alt="redirect"></p>
]]></content>
      <tags>
        <tag>Github Pages</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用自定义域名访问GitHub Pages</title>
    <url>/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AEGitHub-Pages.html</url>
    <content><![CDATA[<p>在GitHub部署了静态网站后都是使用username.github.io进行访问，如果我们有自己的域名，可以通过自己的域名进行访问。<span id="more"></span></p>
<h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在本地的source文件下新建一个名为：CNAME的文件，内容为你的域名。<font color=red>文件名必须是大写，域名只能有一个。</font></p>
<h2 id="添加DNS解析"><a href="#添加DNS解析" class="headerlink" title="添加DNS解析"></a>添加DNS解析</h2><p>在DNS解析服务商处添加两条CNAME记录<br><img data-src="/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AEGitHub-Pages/1.png" alt="DNS解析"><br>检查DNS记录配置是否正确</p>
<ul>
<li>IPv4</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ dig www<span class="selector-class">.eyunbook</span><span class="selector-class">.com</span> +noall +answer -t A</span><br><span class="line">www<span class="selector-class">.eyunbook</span><span class="selector-class">.com</span>.       <span class="number">58</span>      IN      CNAME   eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.</span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">3598</span>    IN      A       <span class="number">185.199</span>.<span class="number">108.153</span></span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">3598</span>    IN      A       <span class="number">185.199</span>.<span class="number">109.153</span></span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">3598</span>    IN      A       <span class="number">185.199</span>.<span class="number">111.153</span></span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">3598</span>    IN      A       <span class="number">185.199</span>.<span class="number">110.153</span></span><br></pre></td></tr></table></figure>
<ul>
<li>IPv6</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ dig www<span class="selector-class">.eyunbook</span><span class="selector-class">.com</span> +noall +answer -t AAAA</span><br><span class="line">www<span class="selector-class">.eyunbook</span><span class="selector-class">.com</span>.       <span class="number">30</span>      IN      CNAME   eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.</span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">30</span>      IN      AAAA    <span class="number">2606</span>:<span class="number">50</span>c0:<span class="number">8000</span>::<span class="number">153</span></span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">30</span>      IN      AAAA    <span class="number">2606</span>:<span class="number">50</span>c0:<span class="number">8003</span>::<span class="number">153</span></span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">30</span>      IN      AAAA    <span class="number">2606</span>:<span class="number">50</span>c0:<span class="number">8002</span>::<span class="number">153</span></span><br><span class="line">eastonsun<span class="selector-class">.github</span><span class="selector-class">.io</span>.    <span class="number">30</span>      IN      AAAA    <span class="number">2606</span>:<span class="number">50</span>c0:<span class="number">8001</span>::<span class="number">153</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ul>
<li>打开静态网站的存储库</li>
<li>点击Settings</li>
<li>在左边栏找到Code and automation，点击下方的Pages</li>
<li>在Custom domain中填入自己的域名，并勾先下方的Enforce HTTPS,此处我填写的是www的子域，这样访问顶级域名时会自动跳转到www子域</li>
</ul>
<p><img data-src="/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AEGitHub-Pages/2.png" alt="github设置"></p>
]]></content>
      <tags>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>利用docker的macvlan为qBittorrent设置一个单独的IP</title>
    <url>/%E5%88%A9%E7%94%A8docker%E7%9A%84macvlan%E4%B8%BAqBittorrent%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84IP.html</url>
    <content><![CDATA[<p>家里有一台N305的软路由，分别安装了OpenWrt(192.168.31.1)，群晖(192.168.31.2)，Ubuntu24.04(192.168.31.3)，qBittorrent安装到了群晖的docker，OpenWrt安装了Mihomo，在实际使用过程中发现如果开启了代理全部端口qBittorrent的流量会经过代理服务器，在流量不多的情况下很快就会跑完代理服务器的流量，虽然开启只代理常用端口可以解决这一问题但并不是我想要的结果。经过一翻Google发现利用docker的macvlan可以为qBittorrent单独设置一个IP地址，这样就可以利用Mihomo的代理黑名单功能让qBittorrent流量不走代理。<span id="more"></span></p>
<h2 id="开启群晖的Open-vSwitch"><a href="#开启群晖的Open-vSwitch" class="headerlink" title="开启群晖的Open vSwitch"></a>开启群晖的Open vSwitch</h2><p>点击控制面板—-&gt;网络—-&gt;网络界面—-&gt;管理—-&gt;Open vSwitch，开启Open vSwitch功能</p>
<img data-src="/%E5%88%A9%E7%94%A8docker%E7%9A%84macvlan%E4%B8%BAqBittorrent%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84IP/opne_vswitch.png" class="">
<h2 id="查看群晖和docker网络信息"><a href="#查看群晖和docker网络信息" class="headerlink" title="查看群晖和docker网络信息"></a>查看群晖和docker网络信息</h2><p>SSH连接群晖后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -i     <span class="comment"># 为了后续操作方便先切换到root用户</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p>会看到一个名为ovs_eth0的网络接口<br>接着输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker netwrok <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>这时会列出docker的所有的已有网络</p>
<img data-src="/%E5%88%A9%E7%94%A8docker%E7%9A%84macvlan%E4%B8%BAqBittorrent%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84IP/docker_network.png" class="">
<div class="note info"><p>qBittorrent是我已经建好的macvln，如果想删除已建好的macvlan可使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">rm</span> macvlan_name</span><br></pre></td></tr></table></figure></div>
<h2 id="创建macvlan"><a href="#创建macvlan" class="headerlink" title="创建macvlan"></a>创建macvlan</h2><p>创建macvlan使用如下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create -d macvlan <span class="attribute">--subnet</span>=192.168.31.0/24 <span class="attribute">--gateway</span>=192.168.31.1 --ipv6 <span class="attribute">--subnet</span>=2409::/60 <span class="attribute">--gateway</span>=2409::1 -o <span class="attribute">parent</span>=ovs_eth0 qBittorrent</span><br></pre></td></tr></table></figure>
<div class="note info"><p><mark class="label ">subnet&#x3D;192.168.31.0&#x2F;24</mark>&emsp;&emsp;IPv4网段<br><mark class="label primary">gateway&#x3D;192.168.31.1</mark>&emsp;&emsp;IPv4网关<br><mark class="label success">ipv6</mark>&emsp;&emsp;启用IPv6<br><mark class="label info">subnet&#x3D;2409::&#x2F;60</mark>&emsp;&emsp;IPv6前缀<code>(此写法仅限中国移动)</code><br><mark class="label warning">gateway&#x3D;2409::1</mark>&emsp;&emsp;IPv6网关<br><mark class="label danger">parent&#x3D;ovs_eth0</mark>&emsp;&emsp;docker网络接口的名称<br><mark class="label default">qBittorrent</mark>&emsp;&emsp;macvlan网络的名称<br><strong>IPv6前缀和网关的写法除了上述写法外还可以使用：</strong></p>
<ul>
<li><em><strong>subnet&#x3D;fe80::&#x2F;60&emsp;&emsp;gateway&#x3D;fe80::1</strong></em></li>
<li><em><strong>subnet&#x3D;fd00:9248:6b2c::&#x2F;48&emsp;&emsp;gateway&#x3D;fd00:9248:6b2c::1</strong></em>具体的前缀和网关要根据OpenWrt接口—-&gt;全局网络选项的设置进行修改</li>
</ul>
</div>
<p>完成后再次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>就会发现多一个名为qBittorrent的macvlan网络接口</p>
<h2 id="创建qBittorrent容器"><a href="#创建qBittorrent容器" class="headerlink" title="创建qBittorrent容器"></a>创建qBittorrent容器</h2><p>使用如下命令创建qBittorrent容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d <span class="attribute">--name</span>=qBittorrent <span class="attribute">--net</span>=qBittorrent <span class="attribute">--ip</span>=192.168.31.4 -v /volume1/qBittorrent/config:<span class="built_in">/config </span>-v /volume1/qBittorrent/download:/downloads <span class="attribute">--privileged</span>=<span class="literal">true</span> <span class="attribute">--restart</span>=always superng6/qbittorrent:latest</span><br></pre></td></tr></table></figure>
<div class="note info"><p><mark class="label default">name&#x3D;qBittorrent</mark>&emsp;&emsp;容器的名字<br><mark class="label danger">ip&#x3D;192.168.31.4</mark>&emsp;&emsp;容器的IP地址<br><mark class="label warning">v &#x2F;volume1&#x2F;qBittorrent&#x2F;config:&#x2F;config</mark>&emsp;&emsp;容器config文件和群晖共享文件夹的映射<br><mark class="label info">-v &#x2F;volume1&#x2F;qBittorrent&#x2F;download:&#x2F;downloads</mark>&emsp;&emsp;容器downloads文件和群晖共享文件夹的映射</p>
</div>
<p>至此就创建了一个IP地址为：192.168.31.4的qBittorrent容器，将此IP地址加入到Mihomo的代理黑名单中流量就不会经过代理。</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>macvlan</tag>
        <tag>群晖</tag>
        <tag>qBittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title>去重合并Mihomo的去广告规则</title>
    <url>/%E5%8E%BB%E9%87%8D%E5%90%88%E5%B9%B6Mihomo%E7%9A%84%E5%8E%BB%E5%B9%BF%E5%91%8A%E8%A7%84%E5%88%99.html</url>
    <content><![CDATA[<p>本教程旨在提供最详尽的指导，帮助没有任何编程基础的你也能使用 <code>monitor.bat</code> 脚本和 Python 脚本来自动化更新 Mihomo 广告拦截规则。</p>
<p><strong>重要提示：</strong> 在开始之前，请确保你已经下载或创建了以下文件：</p>
<ul>
<li><code>process_rules.py</code> (版本 1 - 推荐，<strong>可以自动添加和修改文件名后缀</strong>)。</li>
<li><code>process_rules_basic.py</code> (版本 2 - 基础版，<strong>不能自动修改文件名后缀</strong>)。</li>
<li><code>monitor.bat</code> (你需要按照教程中的说明创建)。</li>
<li>Mihomo 的 Windows 可执行文件 (<code>mihomo-windows-amd64.exe</code> 或类似名称)。<span id="more"></span></li>
</ul>
<p><strong>第一步：准备所需的 Python 脚本 (选择其一)</strong></p>
<p>你需要选择并保存一个 Python 脚本。版本 1 更智能，推荐使用，因为它能自动处理一些可能的文件名问题。</p>
<ul>
<li><p><strong>版本 1: <code>process_rules.py</code> (推荐 - 可以自动添加和修改文件名后缀)</strong></p>
<ol>
<li><p>打开一个<strong>纯文本编辑器</strong>，例如 Windows 自带的“记事本”（Notepad）。</p>
</li>
<li><p>复制粘贴下面的代码到这个空白的文本文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize_filename</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从 URL 生成安全的文件名。&quot;&quot;&quot;</span></span><br><span class="line">    parsed_url = urlparse(url)</span><br><span class="line">    path = parsed_url.path.strip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    name = os.path.basename(path)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">url, save_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从 URL 下载文件并保存到指定路径。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">8192</span>):</span><br><span class="line">                file.write(chunk)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功下载文件到: <span class="subst">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_yaml_data</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载 YAML 文件数据。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = yaml.safe_load(f) <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功加载文件: <span class="subst">&#123;filepath&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;加载到的数据: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：文件 <span class="subst">&#123;filepath&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：解析 YAML 文件 <span class="subst">&#123;filepath&#125;</span> 时发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_and_deduplicate_yaml</span>(<span class="params">urls, output_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并多个 YAML 文件中 &#x27;payload&#x27; 列表的内容，去除重复项，</span></span><br><span class="line"><span class="string">    并将去重后的列表作为顶层内容写入输出文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_payload = []</span><br><span class="line">    temp_files = []</span><br><span class="line">    download_successful = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(urls):</span><br><span class="line">        filename = sanitize_filename(url)</span><br><span class="line">        temp_file_base = <span class="string">f&quot;temp_file_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>_<span class="subst">&#123;filename&#125;</span>&quot;</span></span><br><span class="line">        temp_file = <span class="string">f&quot;<span class="subst">&#123;temp_file_base&#125;</span>&quot;</span> <span class="comment"># 初始临时文件名</span></span><br><span class="line">        temp_files.append(temp_file)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> download_file(url, temp_file):</span><br><span class="line">            download_successful = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> download_successful:</span><br><span class="line">        processed_temp_files = []</span><br><span class="line">        <span class="keyword">for</span> temp_file <span class="keyword">in</span> temp_files:</span><br><span class="line">            is_yaml = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(temp_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    yaml.safe_load(f)</span><br><span class="line">                is_yaml = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> (FileNotFoundError, yaml.YAMLError):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            original_filename = os.path.basename(urlparse(urls[temp_files.index(temp_file)]).path)</span><br><span class="line">            <span class="keyword">if</span> is_yaml <span class="keyword">and</span> <span class="keyword">not</span> original_filename.lower().endswith(<span class="string">&quot;.yaml&quot;</span>):</span><br><span class="line">                new_temp_file = <span class="string">f&quot;<span class="subst">&#123;temp_file&#125;</span>.yaml&quot;</span></span><br><span class="line">                os.rename(temp_file, new_temp_file)</span><br><span class="line">                processed_temp_files.append(new_temp_file)</span><br><span class="line">                <span class="keyword">if</span> temp_file <span class="keyword">in</span> temp_files:</span><br><span class="line">                    temp_files[temp_files.index(temp_file)] = new_temp_file</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;文件 &#x27;<span class="subst">&#123;original_filename&#125;</span>&#x27; 内容是 YAML，已重命名为 &#x27;<span class="subst">&#123;os.path.basename(new_temp_file)&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                processed_temp_files.append(temp_file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> filepath <span class="keyword">in</span> processed_temp_files:</span><br><span class="line">            data = load_yaml_data(filepath)</span><br><span class="line">            <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">                all_payload.extend(data[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;从 <span class="subst">&#123;filepath&#125;</span> 中提取到的 payload 数量: <span class="subst">&#123;<span class="built_in">len</span>(data[<span class="string">&#x27;payload&#x27;</span>])&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;在 <span class="subst">&#123;filepath&#125;</span> 中未找到 &#x27;payload&#x27; 键或文件加载失败。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        deduplicated_payload = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(all_payload)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;去重后的 payload 数量: <span class="subst">&#123;<span class="built_in">len</span>(deduplicated_payload)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        output_yaml_file = output_file</span><br><span class="line">        output_data = &#123;<span class="string">&#x27;payload&#x27;</span>: deduplicated_payload&#125;</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_yaml_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">            yaml.dump(output_data, outfile, sort_keys=<span class="literal">False</span>, allow_unicode=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功合并并去重，结果已保存到 <span class="subst">&#123;output_yaml_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> temp_file <span class="keyword">in</span> processed_temp_files:</span><br><span class="line">            os.remove(temp_file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;临时文件已删除。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;部分文件下载失败，无法执行合并和去重。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_rules_from_yaml</span>(<span class="params">yaml_file, rules_to_delete_str, delimiter=<span class="string">&quot;|||&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从 YAML 文件中删除指定的多个规则。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        yaml_file (str): YAML 文件的路径。</span></span><br><span class="line"><span class="string">        rules_to_delete_str (str): 要删除的规则字符串，用 delimiter 分隔。</span></span><br><span class="line"><span class="string">        delimiter (str): 分隔符，默认为 &quot;|||&quot;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    rules_to_delete = rules_to_delete_str.split(delimiter)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = load_yaml_data(yaml_file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;payload&#x27;</span>], <span class="built_in">list</span>):</span><br><span class="line">            initial_rule_count = <span class="built_in">len</span>(data[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line">            data[<span class="string">&#x27;payload&#x27;</span>] = [rule <span class="keyword">for</span> rule <span class="keyword">in</span> data[<span class="string">&#x27;payload&#x27;</span>] <span class="keyword">if</span> rule <span class="keyword">not</span> <span class="keyword">in</span> rules_to_delete]</span><br><span class="line">            deleted_count = initial_rule_count - <span class="built_in">len</span>(data[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(yaml_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                yaml.dump(data, f, sort_keys=<span class="literal">False</span>, allow_unicode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> deleted_count &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;yaml_file&#125;</span> 中删除了 <span class="subst">&#123;deleted_count&#125;</span> 条规则。&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;在 <span class="subst">&#123;yaml_file&#125;</span> 中未找到任何要删除的指定规则。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;YAML 文件 <span class="subst">&#123;yaml_file&#125;</span> 结构不符合预期，无法找到规则列表。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：文件 <span class="subst">&#123;yaml_file&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：解析 YAML 文件 <span class="subst">&#123;yaml_file&#125;</span> 时发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">3</span>:</span><br><span class="line">        operation = sys.argv[<span class="number">1</span>].lower()</span><br><span class="line">        output_file = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> operation == <span class="string">&quot;merge&quot;</span>:</span><br><span class="line">            urls = sys.argv[<span class="number">3</span>:]</span><br><span class="line">            merge_and_deduplicate_yaml(urls, output_file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> operation == <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">                rules_to_delete_str = sys.argv[<span class="number">3</span>]</span><br><span class="line">                delimiter = sys.argv[<span class="number">4</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">4</span> <span class="keyword">else</span> <span class="string">&quot;|||&quot;</span></span><br><span class="line">                delete_rules_from_yaml(output_file, rules_to_delete_str, delimiter)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;用法: python process_rules.py delete &lt;yaml_file&gt; &lt;rules_to_delete_separated_by_delimiter&gt; [delimiter]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;用法: python process_rules.py [merge|delete] &lt;output_file&gt; &lt;arguments...&gt;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  merge &lt;output_file&gt;.yaml &lt;url1&gt; &lt;url2&gt; ...&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  delete &lt;yaml_file&gt;.yaml &lt;rules_to_delete_separated_by_delimiter&gt; [delimiter]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用法: python process_rules.py [merge|delete] &lt;output_file&gt; &lt;arguments...&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  merge &lt;output_file&gt;.yaml &lt;url1&gt; &lt;url2&gt; ...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  delete &lt;output_file&gt;.yaml &lt;rules_to_delete_separated_by_delimiter&gt; [delimiter]&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照之前的说明，将这段代码保存为 <code>process_rules.py</code>。</p>
</li>
</ol>
</li>
<li><p><strong>版本 2: <code>process_rules_basic.py</code> (基础版 - 不能自动修改文件名后缀)</strong></p>
<ol>
<li><p>同样，打开一个<strong>纯文本编辑器</strong>（记事本）。</p>
</li>
<li><p>复制粘贴下面的代码到文本文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">url, save_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从 URL 下载文件并保存到指定路径。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">8192</span>):</span><br><span class="line">                file.write(chunk)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功下载文件到: <span class="subst">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_yaml_data</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载 YAML 文件数据。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = yaml.safe_load(f) <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功加载文件: <span class="subst">&#123;filepath&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;加载到的数据: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：文件 <span class="subst">&#123;filepath&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：解析文件 <span class="subst">&#123;filepath&#125;</span> 时发生 YAML 错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_and_deduplicate_yaml</span>(<span class="params">file_paths, output_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并多个 YAML 文件中 &#x27;payload&#x27; 列表的内容，去除重复项，</span></span><br><span class="line"><span class="string">    并将去重后的列表作为顶层内容写入输出文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_payload = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filepath <span class="keyword">in</span> file_paths:</span><br><span class="line">        data = load_yaml_data(filepath)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">            all_payload.extend(data[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;从 <span class="subst">&#123;filepath&#125;</span> 中提取到的 payload 数量: <span class="subst">&#123;<span class="built_in">len</span>(data[<span class="string">&#x27;payload&#x27;</span>])&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;在 <span class="subst">&#123;filepath&#125;</span> 中未找到 &#x27;payload&#x27; 键或文件加载失败。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    deduplicated_payload = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(all_payload)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;去重后的 payload 数量: <span class="subst">&#123;<span class="built_in">len</span>(deduplicated_payload)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    output_yaml_file = output_file</span><br><span class="line"></span><br><span class="line">    output_data = &#123;<span class="string">&#x27;payload&#x27;</span>: deduplicated_payload&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_yaml_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">        yaml.dump(output_data, outfile, sort_keys=<span class="literal">False</span>, allow_unicode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;成功合并并去重，结果已保存到 <span class="subst">&#123;output_yaml_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_rules_from_yaml</span>(<span class="params">yaml_file, rules_to_delete_str, delimiter=<span class="string">&quot;|||&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从 YAML 文件中删除指定的多个规则。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        yaml_file (str): YAML 文件的路径。</span></span><br><span class="line"><span class="string">        rules_to_delete_str (str): 要删除的规则字符串，用 delimiter 分隔。</span></span><br><span class="line"><span class="string">        delimiter (str): 分隔符，默认为 &quot;|||&quot;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    rules_to_delete = rules_to_delete_str.split(delimiter)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = load_yaml_data(yaml_file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;payload&#x27;</span>], <span class="built_in">list</span>):</span><br><span class="line">            initial_rule_count = <span class="built_in">len</span>(data[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line">            data[<span class="string">&#x27;payload&#x27;</span>] = [rule <span class="keyword">for</span> rule <span class="keyword">in</span> data[<span class="string">&#x27;payload&#x27;</span>] <span class="keyword">if</span> rule <span class="keyword">not</span> <span class="keyword">in</span> rules_to_delete]</span><br><span class="line">            deleted_count = initial_rule_count - <span class="built_in">len</span>(data[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(yaml_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                yaml.dump(data, f, sort_keys=<span class="literal">False</span>, allow_unicode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> deleted_count &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;yaml_file&#125;</span> 中删除了 <span class="subst">&#123;deleted_count&#125;</span> 条规则。&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;在 <span class="subst">&#123;yaml_file&#125;</span> 中未找到任何要删除的指定规则。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;YAML 文件 <span class="subst">&#123;yaml_file&#125;</span> 结构不符合预期，无法找到规则列表。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：文件 <span class="subst">&#123;yaml_file&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：解析 YAML 文件 <span class="subst">&#123;yaml_file&#125;</span> 时发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">        operation = sys.argv[<span class="number">1</span>].lower()</span><br><span class="line">        output_file = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> operation == <span class="string">&quot;merge&quot;</span>:</span><br><span class="line">            urls = sys.argv[<span class="number">3</span>:]</span><br><span class="line">            temp_files = []</span><br><span class="line">            download_successful = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(urls):</span><br><span class="line">                temp_file = <span class="string">f&quot;temp_file_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.yaml&quot;</span></span><br><span class="line">                temp_files.append(temp_file)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> download_file(url, temp_file):</span><br><span class="line">                    download_successful = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> download_successful:</span><br><span class="line">                merge_and_deduplicate_yaml(temp_files, output_file)</span><br><span class="line">                <span class="keyword">for</span> temp_file <span class="keyword">in</span> temp_files:</span><br><span class="line">                    os.remove(temp_file)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;临时文件已删除。&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;部分文件下载失败，无法执行合并和去重。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> operation == <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">                rules_to_delete_str = sys.argv[<span class="number">3</span>]</span><br><span class="line">                delimiter = sys.argv[<span class="number">4</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">4</span> <span class="keyword">else</span> <span class="string">&quot;|||&quot;</span></span><br><span class="line">                delete_rules_from_yaml(output_file, rules_to_delete_str, delimiter)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;用法: python process_rules_basic.py delete &lt;yaml_file&gt; &lt;rules_to_delete_separated_by_delimiter&gt; [delimiter]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;用法: python process_rules_basic.py [merge|delete] &lt;output_file&gt; &lt;arguments...&gt;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  merge &lt;output_file&gt;.yaml &lt;url1&gt; &lt;url2&gt; ...&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  delete &lt;yaml_file&gt;.yaml &lt;rules_to_delete_separated_by_delimiter&gt; [delimiter]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用法: python process_rules_basic.py [merge|delete] &lt;output_file&gt; &lt;arguments...&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  merge &lt;output_file&gt;.yaml &lt;url1&gt; &lt;url2&gt; ...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  delete &lt;output_file&gt;.yaml &lt;rules_to_delete_separated_by_delimiter&gt; [delimiter]&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照之前的说明，将这段代码保存为 <code>process_rules_basic.py</code>。</p>
</li>
</ol>
</li>
<li><p><strong>选择哪个版本？</strong></p>
<ul>
<li>如果你下载的规则列表 URL 有些没有 <code>.yaml</code> 后缀，或者你希望脚本更智能地处理文件名，强烈建议使用 **<code>process_rules.py</code> (版本 1)**。</li>
<li>如果你非常确定所有你提供的规则列表 URL 都指向以 <code>.yaml</code> 结尾的 YAML 文件，并且文件名本身就正确，那么你可以使用 **<code>process_rules_basic.py</code> (版本 2)**。否则，版本 1 会更省心。</li>
</ul>
</li>
<li><p><strong>运行 <code>merge_rules.py</code> 之前，你需要确保你的计算机上安装了 Python，并且安装了 <code>PyYAML</code> 和 <code>requests</code> 这两个第三方库。</strong></p>
<ul>
<li><strong>安装方法：</strong><ol>
<li>按下 Windows 键，在搜索框中输入 <code>cmd</code>，然后按回车键打开“命令提示符”窗口。</li>
<li>在命令提示符窗口中，输入 <code>python --version</code>，然后按回车键。如果看到 Python 的版本信息，说明 Python 已安装。如果提示找不到命令，请按照以下步骤安装 Python。</li>
<li>打开你的网页浏览器，访问 Python 的官方网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMv">https://www.python.org/downloads/<i class="fa fa-external-link-alt"></i></span></li>
<li>下载最新的 Python 3 版本。</li>
<li>运行安装程序，务必勾选 “<strong>Add Python to PATH</strong>“ 选项，然后点击 “<strong>Install Now</strong>“。</li>
<li>安装完成后，重新打开“命令提示符”窗口，再次输入 <code>python --version</code> 检查是否安装成功。</li>
<li>在“命令提示符”窗口中，输入以下命令并按回车键安装 <code>PyYAML</code>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure></li>
<li>等待安装完成后，输入以下命令并按回车键安装 <code>requests</code>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ul>
<p><strong>第二步：创建 <code>monitor.bat</code> (批处理脚本)</strong></p>
<ol>
<li><p>打开一个<strong>纯文本编辑器</strong>，例如 Windows 自带的“记事本”（Notepad）。</p>
</li>
<li><p>复制粘贴下面的代码到这个空白的文本文件中。<strong>请仔细阅读代码中的注释，并根据你的实际情况修改变量。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">chcp 65001 &gt; nul</span><br><span class="line">REM 设置输出的 YAML 文件路径和名称。你可以根据你的喜好修改。</span><br><span class="line">set &quot;output_file=C:\MihomoRules\adblock.yaml&quot;</span><br><span class="line">REM 设置输出的 Mihomo 规则文件 (.mrs) 路径和名称。建议与上面的 YAML 文件放在同一个目录下。</span><br><span class="line">set &quot;output_mrs_domain=C:\MihomoRules\adblock.mrs&quot;</span><br><span class="line">REM 设置你保存的 Python 脚本 (merge_rules.py) 的完整路径。请根据你保存的实际位置修改。</span><br><span class="line">set &quot;python_script=C:\MihomoTools\merge_rules.py&quot;</span><br><span class="line">REM 填写你要下载的广告拦截规则列表的网址。你可以添加更多行，例如 set &quot;url4=...&quot;</span><br><span class="line">set &quot;url1=你的第一个规则列表URL&quot;</span><br><span class="line">set &quot;url2=你的第二个规则列表URL&quot;</span><br><span class="line">set &quot;url3=你的第三个规则列表URL&quot;</span><br><span class="line">REM 设置 Mihomo 可执行文件的完整路径。请根据你 Mihomo 程序的实际位置修改。</span><br><span class="line">set &quot;mihomo_path=C:\Mihomo\mihomo-windows-amd64.exe&quot;</span><br><span class="line">REM 设置你想要从合并后的规则中删除的特定规则。多个规则之间用 ||| 分隔。</span><br><span class="line">REM 规则的格式通常是 &quot;payload: example.com&quot; 或 &quot;domain: ads.example.org&quot;。</span><br><span class="line">REM 如果你不想删除任何规则，请将等号后面的内容留空。</span><br><span class="line">set &quot;rules_to_remove=payload: unwanted1.com|||payload: unwanted2.net|||domain: ads.example.org&quot;</span><br><span class="line">REM 设置删除规则时使用的分隔符，通常不需要修改。</span><br><span class="line">set &quot;delimiter=|||&quot;</span><br><span class="line"></span><br><span class="line">echo 正在下载并合并去重规则...</span><br><span class="line">REM 调用 Python 脚本执行合并操作，并将下载链接和输出文件名作为参数传递。</span><br><span class="line">python &quot;%python_script%&quot; merge &quot;%output_file%&quot; &quot;%url1%&quot; &quot;%url2%&quot; &quot;%url3%&quot;</span><br><span class="line"></span><br><span class="line">echo 正在删除 YAML 文件中的指定规则...</span><br><span class="line">REM 检查是否设置了要删除的规则，如果设置了，则调用 Python 脚本执行删除操作。</span><br><span class="line">if not &quot;%rules_to_remove%&quot;==&quot;&quot; (</span><br><span class="line">    python &quot;%python_script%&quot; delete &quot;%output_file%&quot; &quot;%rules_to_remove%&quot; &quot;%delimiter%&quot;</span><br><span class="line">) else (</span><br><span class="line">    echo 跳过删除规则，因为 rules_to_remove 为空。</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo 正在将 YAML 文件转换为 .mrs 文件...</span><br><span class="line">REM 调用 Mihomo 程序将 YAML 格式的规则文件转换为 .mrs 格式。</span><br><span class="line">&quot;%mihomo_path%&quot; convert-ruleset domain yaml &quot;%output_file%&quot; &quot;%output_mrs_domain%&quot;</span><br><span class="line"></span><br><span class="line">echo 正在删除临时 YAML 文件...</span><br><span class="line">REM 删除中间生成的 YAML 文件，只保留最终的 .mrs 文件。</span><br><span class="line">del &quot;%output_file%&quot;</span><br><span class="line"></span><br><span class="line">echo 操作完成。</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
</li>
<li><p>在“记事本”中，点击“文件” -&gt; “保存”。</p>
</li>
<li><p>在弹出的“另存为”窗口中：</p>
<ul>
<li>选择一个你容易找到的保存位置，例如你保存 <code>merge_rules.py</code> 的文件夹（例如 <code>C:\MihomoTools</code>）。</li>
<li>在“文件名”框中，输入 <code>monitor.bat</code>（请务必输入 <code>.bat</code> 后缀）。</li>
<li>在“保存类型”下拉菜单中，选择“所有文件 (<em>.</em>)”。</li>
<li>点击“保存”。</li>
</ul>
</li>
</ol>
<p><strong>第三步：准备 Mihomo 可执行文件</strong></p>
<ul>
<li>你需要下载 Mihomo 的 Windows 版本。通常文件名类似于 <code>mihomo-windows-amd64.exe</code>。你可以从 Mihomo 的官方渠道或者你信任的来源下载。</li>
<li>将这个可执行文件放到你在 <code>monitor.bat</code> 脚本中 <code>mihomo_path</code> 变量设置的路径。例如，如果 <code>mihomo_path</code> 设置为 <code>C:\Mihomo\mihomo-windows-amd64.exe</code>，那么你需要将下载的 Mihomo 程序放到 <code>C:\Mihomo</code> 文件夹中。如果 <code>C:\Mihomo</code> 文件夹不存在，你需要先创建它。</li>
</ul>
<p><strong>第四步：配置 <code>monitor.bat</code> 脚本</strong></p>
<p>现在，请再次打开你刚刚创建的 <code>monitor.bat</code> 文件，仔细检查并修改以下变量，确保它们指向你电脑上的正确位置和你想要使用的规则列表：</p>
<ul>
<li><strong><code>set &quot;output_file=C:\MihomoRules\adblock.yaml&quot;</code>:</strong> 确认这是你想要保存合并后 YAML 规则文件的路径。如果 <code>C:\MihomoRules</code> 文件夹不存在，你需要先创建它，或者修改为你电脑上已有的文件夹。</li>
<li><strong><code>set &quot;output_mrs_domain=C:\MihomoRules\adblock.mrs&quot;</code>:</strong> 确认这是你想要保存最终 <code>.mrs</code> 规则文件的路径。</li>
<li><strong><code>set &quot;python_script=C:\MihomoTools\merge_rules.py&quot;</code>:</strong> <strong>非常重要！</strong> 确保这个路径指向你实际保存的 <code>merge_rules.py</code> 文件。如果你的 Python 脚本和 <code>monitor.bat</code> 在同一个文件夹，你可以只写文件名，例如 <code>set &quot;python_script=merge_rules.py&quot;</code>。</li>
<li><strong><code>set &quot;url1=你的第一个规则列表URL&quot;</code>、<code>set &quot;url2=你的第二个规则列表URL&quot;</code>、<code>set &quot;url3=你的第三个规则列表URL&quot;</code>:</strong> 将 <code>你的第一个规则列表URL</code> 等替换为你想要使用的广告拦截规则的网络地址。这些地址通常以 <code>http://</code> 或 <code>https://</code> 开头。你可以添加更多 <code>set &quot;url4=新的URL&quot;</code> 这样的行来添加更多规则来源。</li>
<li><strong><code>set &quot;mihomo_path=C:\Mihomo\mihomo-windows-amd64.exe&quot;</code>:</strong> 确认这个路径指向你下载的 Mihomo 可执行文件。</li>
<li><strong><code>set &quot;rules_to_remove=payload: unwanted1.com|||payload: unwanted2.net|||domain: ads.example.org&quot;</code>:</strong> 根据你的需要修改要删除的规则。如果你不确定要删除哪些规则，可以暂时保持默认或者将等号后面的内容清空 (<code>set &quot;rules_to_remove=&quot;</code>)。</li>
</ul>
<p><strong>第五步：运行 <code>monitor.bat</code> 脚本 (手动执行)</strong></p>
<p>当你仔细配置完 <code>monitor.bat</code> 文件后，你可以尝试手动运行它，看看是否一切正常：</p>
<ol>
<li>找到你保存 <code>monitor.bat</code> 文件的位置。</li>
<li><strong>双击</strong> <code>monitor.bat</code> 文件。</li>
<li>一个黑色的“命令提示符”窗口会弹出，显示脚本正在执行的步骤。</li>
<li>仔细观察窗口中显示的信息。如果一切顺利，你应该会看到下载文件成功、合并去重成功、删除规则成功（如果设置了）、转换为 <code>.mrs</code> 文件成功、删除临时 YAML 文件成功的提示，最后会显示“操作完成。”并等待你按下任意键关闭窗口。</li>
<li>如果脚本运行过程中出现错误，请仔细阅读命令提示符窗口中显示的错误信息。这通常会告诉你问题出在哪里（例如找不到文件、网络连接失败等）。根据错误信息检查你的文件路径和网络连接，然后再次尝试运行 <code>monitor.bat</code>。</li>
<li>运行成功后，请检查你在 <code>output_mrs_domain</code> 变量中设置的路径，看看是否生成了 <code>.mrs</code> 文件。</li>
</ol>
<p><strong>第六步：配置 Mihomo 使用新的规则</strong></p>
<p>你需要告诉 Mihomo 使用你刚刚生成的 <code>.mrs</code> 文件。具体的操作方法会根据你使用的 Mihomo 版本和配置方式有所不同。通常你需要在 Mihomo 的设置中找到“规则集”或类似的选项，然后指定你生成的 <code>.mrs</code> 文件的路径。请参考 Mihomo 的官方文档或相关教程来完成这一步。</p>
<p><strong>第七步：自动化运行 <code>monitor.bat</code> 脚本 (计划任务)</strong></p>
<p>如果你希望 <code>monitor.bat</code> 脚本能够按照你设定的时间自动运行（例如每天凌晨自动更新规则），你需要使用 Windows 的 <strong>任务计划程序</strong>。</p>
<ol>
<li><p><strong>打开任务计划程序：</strong></p>
<ul>
<li>点击 Windows 任务栏上的“开始”按钮。</li>
<li>在搜索框中输入“任务计划程序”，然后点击搜索结果中的“任务计划程序”。</li>
</ul>
</li>
<li><p><strong>创建基本任务：</strong></p>
<ul>
<li>在任务计划程序窗口的右侧面板中，找到并点击“创建基本任务…”。</li>
<li>在“名称”框中，为你的自动化任务输入一个易于识别的名称，例如“自动更新 Mihomo 规则”。点击“下一步”。</li>
</ul>
</li>
<li><p><strong>设置触发器 (计划运行时间)：</strong></p>
<ul>
<li>选择你希望脚本运行的频率（例如“每天”、“每周”）。点击“下一步”。</li>
<li>根据你选择的频率，设置具体的开始时间（例如每天凌晨 3:00）。点击“下一步”。</li>
</ul>
</li>
<li><p><strong>设置操作 (要运行的程序)：</strong></p>
<ul>
<li>选择“启动程序”，然后点击“下一步”。</li>
<li>在“程序或脚本”框中，点击“浏览…”按钮，找到并选择你保存的 <code>monitor.bat</code> 文件，然后点击“打开”。</li>
<li>“添加参数(可选)” 和 “起始于(可选)” 框通常可以留空。点击“下一步”。</li>
</ul>
</li>
<li><p><strong>完成：</strong></p>
<ul>
<li>检查任务摘要，确认设置无误后点击“完成”。</li>
</ul>
</li>
</ol>
<p><strong>高级设置 (可选但推荐):</strong></p>
<p>为了让自动化任务更稳定可靠，你可以进行一些高级设置：</p>
<ol>
<li>在任务计划程序中，找到你创建的任务（通常在“任务计划程序库”中）。</li>
<li>右键点击该任务，选择“属性”。</li>
<li>在“常规”选项卡中：<ul>
<li>勾选 “<strong>不管用户是否登录都要运行</strong>“。</li>
<li>你可能需要配置“配置用户帐户”为你的当前用户。</li>
<li>勾选 “<strong>使用最高权限运行</strong>“ (如果你的脚本需要管理员权限，但通常这个脚本不需要)。</li>
</ul>
</li>
<li>在“触发器”选项卡中，你可以更详细地配置运行时间。</li>
<li>在“操作”选项卡中，确认显示的是你选择的 <code>monitor.bat</code> 文件。</li>
<li>在“条件”选项卡中，你可以设置一些条件，例如只有在计算机空闲时才运行。</li>
<li>在“设置”选项卡中，你可以配置任务失败时的重试次数、允许任务运行的最长时间等。建议勾选 “<strong>如果任务失败，则在…分钟后重新启动</strong>“，并设置合理的重试次数和间隔。</li>
</ol>
<p>完成这些设置后，<code>monitor.bat</code> 脚本就会按照你设定的计划自动运行，下载并更新你的 Mihomo 规则。你可以在任务计划程序中随时查看、编辑或禁用这个任务。</p>
<p><strong>常见问题解答:</strong></p>
<ul>
<li><strong>运行 <code>monitor.bat</code> 时提示找不到文件？</strong><ul>
<li>请仔细检查 <code>monitor.bat</code> 脚本中所有文件路径的设置 (<code>output_file</code>, <code>output_mrs_domain</code>, <code>python_script</code>, <code>mihomo_path</code>) 是否指向你电脑上的实际位置。</li>
</ul>
</li>
<li><strong>Python 脚本报错？</strong><ul>
<li>请确保你已经正确安装了 Python，并且安装了 <code>PyYAML</code> 和 <code>requests</code> 这两个库。检查命令提示符窗口中的错误信息，这会告诉你具体的错误原因。</li>
</ul>
</li>
<li><strong>下载规则列表失败？</strong><ul>
<li>请检查你提供的规则列表 URL 是否正确，并且你的电脑可以正常访问这些网址。</li>
</ul>
</li>
<li><strong><code>.mrs</code> 文件没有更新？</strong><ul>
<li>请检查 <code>monitor.bat</code> 脚本是否成功执行到转换 <code>.mrs</code> 文件的步骤，并且 Mihomo 的路径设置正确。</li>
</ul>
</li>
<li><strong>自动化任务没有按计划运行？</strong><ul>
<li>请打开任务计划程序，检查你创建的任务的状态是否为“准备就绪”或“正在运行”。查看“上次运行结果”列是否有错误代码。检查任务的“触发器”设置是否正确。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Mihomo</tag>
        <tag>广告拦截</tag>
        <tag>自动化</tag>
        <tag>规则更新</tag>
      </tags>
  </entry>
  <entry>
    <title>国内外DNS搜集</title>
    <url>/%E5%9B%BD%E5%86%85%E5%A4%96DNS%E6%90%9C%E9%9B%86.html</url>
    <content><![CDATA[<mark class="label ">域名系统</mark>(DNS)会将域名转换为不方便记忆的<mark class="label info">IP地址</mark>，它就好比互联网的电话本。如DNS在域名解析过程中速度慢甚至解析错误会导致网页打开慢、访问失败。如果使用了不安全的DNS服务器，还会遭遇到DNS劫持和污染。<mark class="label danger">DNS劫持</mark>和<mark class="label danger">DNS污染</mark>都会返回错误的IP地址，轻者打不开网页重者可能会窃取用户的<mark class="label warning">密码</mark>、<mark class="label waring">登录凭证</mark>、<mark class="label warning">信用卡</mark>等信息。<span id="more"></span>
<h2 id="国内DNS"><a href="#国内DNS" class="headerlink" title="国内DNS"></a>国内DNS</h2><h3 id="腾讯-DNS"><a href="#腾讯-DNS" class="headerlink" title="腾讯 DNS"></a>腾讯 DNS</h3><div class="tabs" id="腾讯"><ul class="nav-tabs"><li class="tab active"><a href="#腾讯-1">IPv4</a></li><li class="tab"><a href="#腾讯-2">IPv6</a></li><li class="tab"><a href="#腾讯-3">DoH</a></li><li class="tab"><a href="#腾讯-4">DoT</a></li></ul><div class="tab-content"><div class="tab-pane active" id="腾讯-1"><p>119.29.29.29</p></div><div class="tab-pane" id="腾讯-2"><p>2402:4e00::<br>2402:4e00:1::</p></div><div class="tab-pane" id="腾讯-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//doh.pub/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//1.12.12.12/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//120.53.53.53/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//sm2.doh.pub/dns-query</span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>国密SM2，基于腾讯云政企国密解决方案</p>
</div></div><div class="tab-pane" id="腾讯-4"><p>dot.pub<br>1.12.12.12<br>120.53.53.53</p></div></div></div>

<h3 id="阿里-DNS"><a href="#阿里-DNS" class="headerlink" title="阿里 DNS"></a>阿里 DNS</h3><div class="tabs" id="阿里"><ul class="nav-tabs"><li class="tab active"><a href="#阿里-1">IPv4</a></li><li class="tab"><a href="#阿里-2">IPv6</a></li><li class="tab"><a href="#阿里-3">DoH</a></li><li class="tab"><a href="#阿里-4">DoT</a></li></ul><div class="tab-content"><div class="tab-pane active" id="阿里-1"><p>223.5.5.5<br>223.6.6.6</p></div><div class="tab-pane" id="阿里-2"><p>2400:3200::1<br>2400:3200:baba::1</p></div><div class="tab-pane" id="阿里-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//dns.alidns.com/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//223.5.5.5/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//223.6.6.6/dns-query</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="阿里-4"><p>dns.alidns.com<br>223.5.5.5<br>223.6.6.6</p></div></div></div>

<h3 id="360-DNS"><a href="#360-DNS" class="headerlink" title="360 DNS"></a>360 DNS</h3><div class="tabs" id="360"><ul class="nav-tabs"><li class="tab active"><a href="#360-1">电信、移动、铁通</a></li><li class="tab"><a href="#360-2">联通</a></li><li class="tab"><a href="#360-3">DoH</a></li><li class="tab"><a href="#360-4">DoT</a></li></ul><div class="tab-content"><div class="tab-pane active" id="360-1"><p>101.226.4.6<br>218.30.118.6</p></div><div class="tab-pane" id="360-2"><p>123.125.81.6<br>140.207.198.6</p></div><div class="tab-pane" id="360-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//doh.360.cn</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="360-4"><p>dot.360.cn</p></div></div></div>

<h3 id="114-DNS"><a href="#114-DNS" class="headerlink" title="114 DNS"></a>114 DNS</h3><div class="tabs" id="114"><ul class="nav-tabs"><li class="tab active"><a href="#114-1">IPv4</a></li><li class="tab"><a href="#114-2">隐私增强</a></li><li class="tab"><a href="#114-3">学校和家长</a></li></ul><div class="tab-content"><div class="tab-pane active" id="114-1"><p>114.114.114.114<br>114.114.115.115</p></div><div class="tab-pane" id="114-2"><p>114.114.114.119<br>114.114.115.119</p>
<div class="note info"><p>增强网银、证券、购物、游戏、隐私信息安全</p>
</div></div><div class="tab-pane" id="114-3"><p>114.114.114.110<br>114.114.115.110</p>
<div class="note info"><p>可拦截色情网站</p>
</div></div></div></div>

<h3 id="百度-DNS"><a href="#百度-DNS" class="headerlink" title="百度 DNS"></a>百度 DNS</h3><div class="tabs" id="百度"><ul class="nav-tabs"><li class="tab active"><a href="#百度-1">IPv4</a></li><li class="tab"><a href="#百度-2">IPv6</a></li></ul><div class="tab-content"><div class="tab-pane active" id="百度-1"><p>180.76.76.76</p></div><div class="tab-pane" id="百度-2"><p>2400:da00::6666</p></div></div></div>

<h2 id="国外DNS"><a href="#国外DNS" class="headerlink" title="国外DNS"></a>国外DNS</h2><h3 id="Google-DNS"><a href="#Google-DNS" class="headerlink" title="Google DNS"></a>Google DNS</h3><div class="tabs" id="google"><ul class="nav-tabs"><li class="tab active"><a href="#google-1">IPv4</a></li><li class="tab"><a href="#google-2">IPv6</a></li><li class="tab"><a href="#google-3">DoH</a></li><li class="tab"><a href="#google-4">DoT</a></li></ul><div class="tab-content"><div class="tab-pane active" id="google-1"><p>8.8.8.8<br>8.8.4.4</p></div><div class="tab-pane" id="google-2"><p>2001:4860:4860::8888<br>2001:4860:4860::8844</p></div><div class="tab-pane" id="google-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//dns.google/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//8.8.8.8/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//8.8.4.4/dns-query</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="google-4"><p>dns.google</p></div></div></div>

<h3 id="Cloudflare-DNS"><a href="#Cloudflare-DNS" class="headerlink" title="Cloudflare DNS"></a>Cloudflare DNS</h3><div class="tabs" id="cloudflare"><ul class="nav-tabs"><li class="tab active"><a href="#cloudflare-1">IPv4</a></li><li class="tab"><a href="#cloudflare-2">IPv6</a></li><li class="tab"><a href="#cloudflare-3">DoH</a></li><li class="tab"><a href="#cloudflare-4">DoT</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cloudflare-1"><p>1.1.1.1<br>1.0.0.1</p>
<div class="tabs" id="subtabs1"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs1-1">阻止恶意软件</a></li><li class="tab"><a href="#subtabs1-2">阻止恶意软件和成人内容</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs1-1"><p>1.1.1.2<br>1.0.0.2</p></div><div class="tab-pane" id="subtabs1-2"><p>1.1.1.3<br>1.0.0.3</p></div></div></div></div><div class="tab-pane" id="cloudflare-2"><p>2606:4700:4700::1111<br>2606:4700:4700::1001</p>
<div class="tabs" id="subtabs2"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs2-1">阻止恶意软件</a></li><li class="tab"><a href="#subtabs2-2">阻止恶意软件和成人内容</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs2-1"><p>2606:4700:4700::1112<br>2606:4700:4700::1002</p></div><div class="tab-pane" id="subtabs2-2"><p>2606:4700:4700::1113<br>2606:4700:4700::1003</p></div></div></div></div><div class="tab-pane" id="cloudflare-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//cloudflare-dns.com/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//1.1.1.1/dns-query</span></span><br></pre></td></tr></table></figure>

<div class="tabs" id="subtabs3"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs3-1">阻止恶意软件</a></li><li class="tab"><a href="#subtabs3-2">成人内容与恶意软件</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs3-1"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//security.cloudflare-dns.com/dns-query</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="subtabs3-2"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//family.cloudflare-dns.com/dns-query</span></span><br></pre></td></tr></table></figure></div></div></div></div><div class="tab-pane" id="cloudflare-4"><p>one.one.one.one</p>
<div class="tabs" id="subtabs4"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs4-1">阻止恶意软件</a></li><li class="tab"><a href="#subtabs4-2">阻止恶意软件和成人内容</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs4-1"><p>security.cloudflare-dns.com</p></div><div class="tab-pane" id="subtabs4-2"><p>family.cloudflare-dns.com</p></div></div></div></div></div></div>

<h3 id="Quad9-DNS"><a href="#Quad9-DNS" class="headerlink" title="Quad9 DNS"></a>Quad9 DNS</h3><div class="tabs" id="quad9"><ul class="nav-tabs"><li class="tab active"><a href="#quad9-1">IPv4</a></li><li class="tab"><a href="#quad9-2">IPv6</a></li><li class="tab"><a href="#quad9-3">DoH</a></li><li class="tab"><a href="#quad9-4">DoT</a></li></ul><div class="tab-content"><div class="tab-pane active" id="quad9-1"><p>9.9.9.9<br>149.112.112.112</p>
<div class="tabs" id="subtabs5"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs5-1">启用ECS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs5-1"><p>9.9.9.11<br>149.112.112.11</p></div></div></div></div><div class="tab-pane" id="quad9-2"><p>2620:fe::fe<br>2620:fe::9</p>
<div class="tabs" id="subtabs6"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs6-1">启用ECS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs6-1"><p>2620:fe::11<br>2620:fe::fe:11</p></div></div></div></div><div class="tab-pane" id="quad9-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//dns.quad9.net/dns-query</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//9.9.9.9/dns-query</span></span><br></pre></td></tr></table></figure>

<div class="tabs" id="subtabs7"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs7-1">启用ECS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs7-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://dns11.quad9.net/dns-query</span><br></pre></td></tr></table></figure></div></div></div></div><div class="tab-pane" id="quad9-4"><p>dns.quad9.net</p>
<div class="tabs" id="subtabs8"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs8-1">启用ECS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs8-1"><p>dns11.quad9.net</p></div></div></div></div></div></div>

<div class="note info"><p>Quad9 DNS默认支持恶意软件阻止和DNSSEC验证</p>
</div>

<h3 id="AdGuard-DNS"><a href="#AdGuard-DNS" class="headerlink" title="AdGuard DNS"></a>AdGuard DNS</h3><div class="tabs" id="adguard"><ul class="nav-tabs"><li class="tab active"><a href="#adguard-1">IPv4</a></li><li class="tab"><a href="#adguard-2">IPv6</a></li><li class="tab"><a href="#adguard-3">DoH</a></li><li class="tab"><a href="#adguard-4">DoT</a></li><li class="tab"><a href="#adguard-5">QUIC</a></li><li class="tab"><a href="#adguard-6">Crypt</a></li></ul><div class="tab-content"><div class="tab-pane active" id="adguard-1"><p>94.140.14.14<br>94.140.15.15</p>
<div class="note info"><p>默认服务器，拦截广告和跟踪器</p>
</div>

<div class="tabs" id="subtabs9"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs9-1">无过滤器</a></li><li class="tab"><a href="#subtabs9-2">家庭保护</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs9-1"><p>94.140.14.140<br>94.140.14.141</p>
<div class="note info"><p>无过滤服务器，不拦截广告、跟踪器</p>
</div></div><div class="tab-pane" id="subtabs9-2"><p>94.140.14.15<br>94.140.15.16</p>
<div class="note info"><p>家庭保护服务器，拦截广告、跟踪器、成人内容，并在可能的情况下启用安全搜索和安全模式</p>
</div></div></div></div></div><div class="tab-pane" id="adguard-2"><p>2a10:50c0::ad1:ff<br>2a10:50c0::ad2:ff</p>
<div class="note info"><p>默认服务器,拦截广告和跟踪器</p>
</div>

<div class="tabs" id="subtabs10"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs10-1">无过滤</a></li><li class="tab"><a href="#subtabs10-2">家庭保护</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs10-1"><p>2a10:50c0::1:ff<br>2a10:50c0::2:ff</p>
<div class="note info"><p>无过滤服务器，不拦截广告、跟踪器</p>
</div></div><div class="tab-pane" id="subtabs10-2"><p>2a10:50c0::bad1:ff<br>2a10:50c0::bad2:ff</p>
<div class="note info"><p>家庭保护服务器，拦截广告、跟踪器、成人内容，并在可能的情况下启用安全搜索和安全模式</p>
</div></div></div></div></div><div class="tab-pane" id="adguard-3"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//dns.adguard-dns.com/dns-query</span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>默认服务器，拦截广告和跟踪器</p>
</div>

<div class="tabs" id="subtabs11"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs11-1">无过滤</a></li><li class="tab"><a href="#subtabs11-2">家庭保护</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs11-1"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//unfiltered.adguard-dns.com/dns-query</span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>无过滤服务器，不拦截广告、跟踪器</p>
</div></div><div class="tab-pane" id="subtabs11-2"><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//family.adguard-dns.com/dns-query</span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>家庭保护服务器， 拦截广告、跟踪器、成人内容，并在可能的情况下启用安全搜索和安全模式</p>
</div></div></div></div></div><div class="tab-pane" id="adguard-4"><p>dns.adguard-dns.com</p>
<div class="note info"><p>默认服务器，拦截广告和跟踪器</p>
</div>

<div class="tabs" id="subtabs12"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs12-1">无过滤</a></li><li class="tab"><a href="#subtabs12-2">家庭保护</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs12-1"><p>unfiltered.adguard-dns.com</p>
<div class="note info"><p>无过滤服务器，不拦截广告、跟踪器</p>
</div></div><div class="tab-pane" id="subtabs12-2"><p>family.adguard-dns.com</p>
<div class="note info"><p>家庭保护服务器，拦截广告、跟踪器、成人内容，并在可能的情况下启用安全搜索和安全模式</p>
</div></div></div></div></div><div class="tab-pane" id="adguard-5"><p>quic:&#x2F;&#x2F;dns.adguard-dns.com</p>
<div class="note info"><p>默认服务器，拦截广告和跟踪器</p>
</div>

<div class="tabs" id="subtabs13"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs13-1">无过滤</a></li><li class="tab"><a href="#subtabs13-2">家庭保护</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs13-1"><p>quic:&#x2F;&#x2F;unfiltered.adguard-dns.com</p>
<div class="note info"><p>无过滤服务器，不拦截广告、跟踪器</p>
</div></div><div class="tab-pane" id="subtabs13-2"><p>quic:&#x2F;&#x2F;family.adguard-dns.com</p>
<div class="note info"><p>家庭保护服务器，拦截广告、跟踪器、成人内容，并在可能的情况下启用安全搜索和安全模式</p>
</div></div></div></div></div><div class="tab-pane" id="adguard-6"><p>sdns:&#x2F;&#x2F;AQMAAAAAAAAAETk0LjE0MC4xNC4xNDo1NDQzINErR_JS3PLCu_iZEIbq95zkSV2LFsigxDIuUso_OQhzIjIuZG5zY3J5cHQuZGVmYXVsdC5uczEuYWRndWFyZC5jb20</p>
<div class="note info"><p>默认服务器，拦截广告和跟踪器</p>
</div>

<div class="tabs" id="subtabs14"><ul class="nav-tabs"><li class="tab active"><a href="#subtabs14-1">无过滤</a></li><li class="tab"><a href="#subtabs14-2">家庭保护</a></li></ul><div class="tab-content"><div class="tab-pane active" id="subtabs14-1"><p>sdns:&#x2F;&#x2F;AQMAAAAAAAAAEjk0LjE0MC4xNC4xNDA6NTQ0MyC16ETWuDo-PhJo62gfvqcN48X6aNvWiBQdvy7AZrLa-iUyLmRuc2NyeXB0LnVuZmlsdGVyZWQubnMxLmFkZ3VhcmQuY29t</p>
<div class="note info"><p>无过滤服务器，不拦截广告、跟踪器</p>
</div></div><div class="tab-pane" id="subtabs14-2"><p>sdns:&#x2F;&#x2F;AQMAAAAAAAAAETk0LjE0MC4xNC4xNTo1NDQzILgxXdexS27jIKRw3C7Wsao5jMnlhvhdRUXWuMm1AFq6ITIuZG5zY3J5cHQuZmFtaWx5Lm5zMS5hZGd1YXJkLmNvbQ</p>
<div class="note info"><p>家庭保护服务器，拦截广告、跟踪器、成人内容，并在可能的情况下启用安全搜索和安全模式</p>
</div></div></div></div></div></div></div>]]></content>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 24.04 中添加非root用户并授予sudo权限</title>
    <url>/%E5%9C%A8Ubuntu-24-04-%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E4%BA%88sudo%E6%9D%83%E9%99%90.html</url>
    <content><![CDATA[<p>很多VPS默认的用户名为root，但有的时候我们需要非root用户的环境，比如说编译OpenWrt就需要非root用户。<span id="more"></span></p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>以root用户身份登录，通过以下命令新建用户：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">adduser </span>username    <span class="comment"># 将username替换为自己的用户名</span></span><br></pre></td></tr></table></figure>
<p>回车后首先输入新用户的密码，并确认密码：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">New</span> password:</span><br><span class="line">Retype <span class="keyword">new</span> password:</span><br></pre></td></tr></table></figure>
<p>剩下的一路回车即可，完成后系统会提示：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">info</span>: Adding <span class="built_in">new</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">to</span> supplemental / extra <span class="keyword">groups</span> <span class="string">&#x27;users&#x27;</span></span><br><span class="line"><span class="keyword">info</span>: Adding <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">to</span> <span class="keyword">group</span> <span class="string">&#x27;users&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="授予新用户sudo权限"><a href="#授予新用户sudo权限" class="headerlink" title="授予新用户sudo权限"></a>授予新用户sudo权限</h2><p>授予新用户sudo权限有两种方法</p>
<h3 id="一、将新用户添加到sudo组"><a href="#一、将新用户添加到sudo组" class="headerlink" title="一、将新用户添加到sudo组"></a>一、将新用户添加到sudo组</h3><p>使用以下命令将新用户添加到sudo组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -aG <span class="built_in">sudo</span> username</span><br></pre></td></tr></table></figure>
<h3 id="二、编辑-etc-sudoers文件"><a href="#二、编辑-etc-sudoers文件" class="headerlink" title="二、编辑&#x2F;etc&#x2F;sudoers文件"></a>二、编辑&#x2F;etc&#x2F;sudoers文件</h3><p>使用<mark class="label info">visudo</mark>命令可以打开系统默认的编辑器编辑配置文件<mark class="label ">/etc/sudoers</mark>，在<mark class="label ">/etc/sudoers</mark>中找到<mark class="label primary">root ALL=(ALL:ALL) ALL</mark>，在此行下方添加<mark class="label warning">username ALL=(ALL:ALL) ALL</mark>，保存后退出</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">visudo</span><br><span class="line">root    <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>:<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br><span class="line">username <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>:<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>
<h2 id="测试新用户的sudo权限"><a href="#测试新用户的sudo权限" class="headerlink" title="测试新用户的sudo权限"></a>测试新用户的sudo权限</h2><p>以新用户身份登录，输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>
<p>输入密码后命令能够正确执行说明新用户添加成功并获得了sudo权限</p>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>以root用户身份登录并输入以下命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deluser username</span></span><br></pre></td></tr></table></figure>
<p>删除用户的同时删除用户的主目录</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">deluser --remove-home username</span><br></pre></td></tr></table></figure>
<p>如果是通过编辑<mark class="label info">/etc/sudoers</mark>获得的sudo权限，还需要使用<mark class="label info">visudo</mark>命令将<mark class="label warning">username ALL=(ALL:ALL) ALL</mark>删除掉。</p>
]]></content>
      <tags>
        <tag>root</tag>
        <tag>Ubuntu24.04</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器关闭QUIC协议</title>
    <url>/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%ADQUIC%E5%8D%8F%E8%AE%AE.html</url>
    <content><![CDATA[<mark class="label ">QUIC</mark>(Quick UDP Internet Connection)是一个通用的传输层网络协议，由<mark class="label info">Google</mark>公司的<mark class="label primary">Jim Roskind</mark>设计，从Chrome浏览器到Google服务器的连接中超过一半的连接都使用了QUIC，QUIC通过UDP协议在两个端点之间建立若干个多路连接，从而提高了网络连接的可靠性并能够有效的<mark>降低传输延时和避免网络拥堵</mark>。QUIC还能<mark class="label success">提高网络切换时的性能</mark>，当设备从WIFI切换到移动网络时，TCP协议会等以前的WIFI连接超时后才会和移动网建立新的连接，因而存在较高的延迟，而QUIC会包含一个<mark class="label info">标识符</mark>，这是客户端和服务器之间连接的<mark class="label primary">唯一标识</mark>，当用户IP地址发生变化时原始ID仍然有效，所以只需发送一个包含原始ID的数据包即可重新建立连接。
<p>然而在国内各大电信运营都面临着巨大的带宽压力，为了保障用户的体验，运营商们会对UDP流量进行限制，例如丢包、低先先级队列和限速等。因此就目前的国内网络环境还是<mark class="label waring">关闭QUIC协议</mark>比较好一点。<span id="more"></span></p>
<div class="tabs" id="first-tab"><ul class="nav-tabs"><li class="tab active"><a href="#first-tab-1">Chome</a></li><li class="tab"><a href="#first-tab-2">Firefox</a></li><li class="tab"><a href="#first-tab-3">Microsoft Edeg</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><ul>
<li>地址栏输入：chrome:&#x2F;&#x2F;flags</li>
<li>搜索框输入：quic</li>
<li>将<mark class="label info">Experimental QUIC protocol</mark>设置为<mark class="label waring">Disable</mark></li>
<li>重启浏览器<img data-src="/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%ADQUIC%E5%8D%8F%E8%AE%AE/chrome.png" class=""></li>
</ul></div><div class="tab-pane" id="first-tab-2"><ul>
<li>地址栏输入：about:config并回车</li>
<li>搜索框输入：<mark class="label info">network.http.http3.enabled</mark></li>
<li>选中布尔选项，单击+号，双击<mark class="label waring">true</mark>变成<mark>false</mark>，重启浏览器<img data-src="/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%ADQUIC%E5%8D%8F%E8%AE%AE/firefox-1.png" class=""></li>
</ul></div><div class="tab-pane" id="first-tab-3"><ul>
<li>地址栏输入：edge:&#x2F;&#x2F;flags</li>
<li>搜索框输入：<mark class="label info">Experimental QUIC protocol</mark></li>
<li>设置为<mark class="label waring">Disable</mark></li>
<li>重启浏览器<img data-src="/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%ADQUIC%E5%8D%8F%E8%AE%AE/edge.png" class=""></li>
</ul></div></div></div>]]></content>
      <tags>
        <tag>QUIC</tag>
        <tag>Chrome</tag>
        <tag>Firefox</tag>
        <tag>Microsoft Edge</tag>
      </tags>
  </entry>
</search>
